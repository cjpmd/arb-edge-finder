
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Copy, FileText, Calculator } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { formatGBP } from "@/lib/utils";

interface Opportunity {
  id: string;
  sport: string;
  teamA: string;
  teamB: string;
  startTime: string;
  bookmakerA: { name: string; odds: number; team: string };
  bookmakerB: { name: string; odds: number; team: string };
  arbPercent: number;
  profitMargin: number;
}

interface BetSlipProps {
  opportunity: Opportunity;
  bankroll: number;
  onClose: () => void;
}

const BetSlip = ({ opportunity, bankroll, onClose }: BetSlipProps) => {
  const { toast } = useToast();

  // Calculate optimal stakes
  const totalOdds = opportunity.bookmakerA.odds + opportunity.bookmakerB.odds;
  const stakeA = (bankroll * opportunity.bookmakerB.odds) / totalOdds;
  const stakeB = (bankroll * opportunity.bookmakerA.odds) / totalOdds;
  
  const returnA = stakeA * opportunity.bookmakerA.odds;
  const returnB = stakeB * opportunity.bookmakerB.odds;
  const profit = Math.min(returnA, returnB) - bankroll;

  const formatTime = (timeString: string) => {
    const date = new Date(timeString);
    return date.toLocaleString();
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard",
      description: "Bet slip details copied successfully",
    });
  };

  const betSlipText = `
ArbEdge Bet Slip
================
Event: ${opportunity.teamA} vs ${opportunity.teamB}
Sport: ${opportunity.sport}
Start Time: ${formatTime(opportunity.startTime)}
Profit Margin: ${opportunity.profitMargin.toFixed(2)}%
Expected Profit: ${formatGBP(profit)}

Bet 1:
Bookmaker: ${opportunity.bookmakerA.name}
Team: ${opportunity.bookmakerA.team}
Odds: ${opportunity.bookmakerA.odds.toFixed(2)}
Stake: ${formatGBP(stakeA)}
Expected Return: ${formatGBP(returnA)}

Bet 2:
Bookmaker: ${opportunity.bookmakerB.name}
Team: ${opportunity.bookmakerB.team}
Odds: ${opportunity.bookmakerB.odds.toFixed(2)}
Stake: ${formatGBP(stakeB)}
Expected Return: ${formatGBP(returnB)}

Total Stakes: ${formatGBP(bankroll)}
Guaranteed Profit: ${formatGBP(profit)}
================
Generated by ArbEdge
  `.trim();

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl bg-slate-800 border-slate-700 text-white">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-white">
            <FileText className="h-5 w-5" />
            Bet Slip - {opportunity.teamA} vs {opportunity.teamB}
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Event Info */}
          <Card className="bg-slate-900 border-slate-700">
            <CardContent className="p-4">
              <div className="flex justify-between items-start mb-2">
                <div>
                  <h3 className="text-lg font-semibold text-white">
                    {opportunity.teamA} vs {opportunity.teamB}
                  </h3>
                  <div className="flex gap-2 mt-1">
                    <Badge variant="outline">{opportunity.sport}</Badge>
                    <Badge variant="outline">{formatTime(opportunity.startTime)}</Badge>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-green-400 font-bold text-lg">
                    +{opportunity.profitMargin.toFixed(2)}%
                  </div>
                  <div className="text-sm text-slate-400">profit margin</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Bet Instructions */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card className="bg-blue-950 border-blue-800">
              <CardContent className="p-4">
                <div className="flex items-center gap-2 mb-3">
                  <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white font-bold">
                    1
                  </div>
                  <h4 className="font-semibold text-white">First Bet</h4>
                </div>
                <div className="space-y-2">
                  <div className="text-sm text-slate-300">
                    <strong>Bookmaker:</strong> {opportunity.bookmakerA.name}
                  </div>
                  <div className="text-sm text-slate-300">
                    <strong>Bet on:</strong> {opportunity.bookmakerA.team}
                  </div>
                  <div className="text-sm text-slate-300">
                    <strong>Odds:</strong> {opportunity.bookmakerA.odds.toFixed(2)}
                  </div>
                  <div className="text-lg font-bold text-white">
                    Stake: {formatGBP(stakeA)}
                  </div>
                  <div className="text-sm text-blue-400">
                    Expected return: {formatGBP(returnA)}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-green-950 border-green-800">
              <CardContent className="p-4">
                <div className="flex items-center gap-2 mb-3">
                  <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center text-white font-bold">
                    2
                  </div>
                  <h4 className="font-semibold text-white">Second Bet</h4>
                </div>
                <div className="space-y-2">
                  <div className="text-sm text-slate-300">
                    <strong>Bookmaker:</strong> {opportunity.bookmakerB.name}
                  </div>
                  <div className="text-sm text-slate-300">
                    <strong>Bet on:</strong> {opportunity.bookmakerB.team}
                  </div>
                  <div className="text-sm text-slate-300">
                    <strong>Odds:</strong> {opportunity.bookmakerB.odds.toFixed(2)}
                  </div>
                  <div className="text-lg font-bold text-white">
                    Stake: {formatGBP(stakeB)}
                  </div>
                  <div className="text-sm text-green-400">
                    Expected return: {formatGBP(returnB)}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Summary */}
          <Card className="bg-slate-900 border-green-600">
            <CardContent className="p-4">
              <div className="flex items-center gap-2 mb-3">
                <Calculator className="h-5 w-5 text-green-400" />
                <h4 className="font-semibold text-white">Profit Summary</h4>
              </div>
              <div className="grid grid-cols-3 gap-4 text-center">
                <div>
                  <div className="text-white font-bold text-lg">{formatGBP(bankroll)}</div>
                  <div className="text-xs text-slate-400">Total Investment</div>
                </div>
                <div>
                  <div className="text-green-400 font-bold text-lg">{formatGBP(profit)}</div>
                  <div className="text-xs text-slate-400">Guaranteed Profit</div>
                </div>
                <div>
                  <div className="text-blue-400 font-bold text-lg">{opportunity.profitMargin.toFixed(2)}%</div>
                  <div className="text-xs text-slate-400">ROI</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Actions */}
          <div className="flex gap-3">
            <Button 
              onClick={() => copyToClipboard(betSlipText)}
              className="flex-1 bg-blue-600 hover:bg-blue-700"
            >
              <Copy className="h-4 w-4 mr-2" />
              Copy Bet Slip
            </Button>
            <Button onClick={onClose} variant="outline" className="flex-1">
              Close
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default BetSlip;
