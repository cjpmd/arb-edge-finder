
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { X, Copy, Check } from "lucide-react";
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";

interface Opportunity {
  id: string;
  sport: string;
  teamA: string;
  teamB: string;
  startTime: string;
  bookmakerA: { name: string; odds: number; team: string };
  bookmakerB: { name: string; odds: number; team: string };
  arbPercent: number;
  profitMargin: number;
}

interface BetSlipProps {
  opportunity: Opportunity;
  bankroll: number;
  onClose: () => void;
}

const BetSlip = ({ opportunity, bankroll, onClose }: BetSlipProps) => {
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();

  // Calculate optimal stakes
  const totalOdds = opportunity.bookmakerA.odds + opportunity.bookmakerB.odds;
  const stakeA = (bankroll * opportunity.bookmakerB.odds) / totalOdds;
  const stakeB = (bankroll * opportunity.bookmakerA.odds) / totalOdds;
  const profit = Math.min(stakeA * opportunity.bookmakerA.odds, stakeB * opportunity.bookmakerB.odds) - bankroll;

  const betSlipText = `
ArbEdge Bet Slip - ${opportunity.teamA} vs ${opportunity.teamB}

BET 1:
Bookmaker: ${opportunity.bookmakerA.name}
Selection: ${opportunity.bookmakerA.team}
Stake: $${stakeA.toFixed(2)}
Odds: ${opportunity.bookmakerA.odds.toFixed(2)}

BET 2:
Bookmaker: ${opportunity.bookmakerB.name}
Selection: ${opportunity.bookmakerB.team}
Stake: $${stakeB.toFixed(2)}
Odds: ${opportunity.bookmakerB.odds.toFixed(2)}

Total Stake: $${bankroll}
Guaranteed Profit: $${profit.toFixed(2)} (${opportunity.profitMargin.toFixed(2)}%)

Generated by ArbEdge
  `.trim();

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(betSlipText);
      setCopied(true);
      toast({
        title: "Copied to clipboard",
        description: "Bet slip has been copied to your clipboard",
      });
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      toast({
        title: "Copy failed",
        description: "Unable to copy to clipboard",
        variant: "destructive",
      });
    }
  };

  return (
    <Card className="bg-slate-800 border-slate-700">
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle className="text-white">Bet Slip</CardTitle>
        <Button
          variant="ghost"
          size="sm"
          onClick={onClose}
          className="text-slate-400 hover:text-white"
        >
          <X className="h-4 w-4" />
        </Button>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="bg-slate-900 rounded-lg p-4">
          <h4 className="text-white font-semibold mb-2">Match Details</h4>
          <div className="text-sm text-slate-300">
            {opportunity.teamA} vs {opportunity.teamB}
          </div>
          <div className="text-xs text-slate-400">
            {opportunity.sport} â€¢ Start: {new Date(opportunity.startTime).toLocaleString()}
          </div>
        </div>

        <div className="space-y-3">
          <div className="bg-blue-950 rounded-lg p-3 border border-blue-800">
            <div className="text-white font-medium mb-1">Bet 1: {opportunity.bookmakerA.name}</div>
            <div className="text-sm text-slate-300">Selection: {opportunity.bookmakerA.team}</div>
            <div className="text-sm text-blue-400">Stake: ${stakeA.toFixed(2)} @ {opportunity.bookmakerA.odds.toFixed(2)}</div>
          </div>

          <div className="bg-green-950 rounded-lg p-3 border border-green-800">
            <div className="text-white font-medium mb-1">Bet 2: {opportunity.bookmakerB.name}</div>
            <div className="text-sm text-slate-300">Selection: {opportunity.bookmakerB.team}</div>
            <div className="text-sm text-green-400">Stake: ${stakeB.toFixed(2)} @ {opportunity.bookmakerB.odds.toFixed(2)}</div>
          </div>
        </div>

        <div className="bg-gradient-to-r from-green-900 to-blue-900 rounded-lg p-4 border border-green-600">
          <div className="grid grid-cols-2 gap-4 text-center">
            <div>
              <div className="text-white font-bold text-lg">${bankroll.toFixed(2)}</div>
              <div className="text-xs text-slate-300">Total Stake</div>
            </div>
            <div>
              <div className="text-green-400 font-bold text-lg">${profit.toFixed(2)}</div>
              <div className="text-xs text-slate-300">Guaranteed Profit</div>
            </div>
          </div>
        </div>

        <div className="bg-slate-900 rounded-lg p-3">
          <div className="text-xs text-slate-400 mb-2">Instructions:</div>
          <div className="text-xs text-slate-300 space-y-1">
            <div>1. Place both bets simultaneously</div>
            <div>2. Use exact stake amounts shown</div>
            <div>3. Profit is guaranteed regardless of outcome</div>
          </div>
        </div>

        <Button
          onClick={copyToClipboard}
          className="w-full bg-green-600 hover:bg-green-700 text-white"
          disabled={copied}
        >
          {copied ? (
            <>
              <Check className="h-4 w-4 mr-2" />
              Copied!
            </>
          ) : (
            <>
              <Copy className="h-4 w-4 mr-2" />
              Copy Bet Slip
            </>
          )}
        </Button>
      </CardContent>
    </Card>
  );
};

export default BetSlip;
